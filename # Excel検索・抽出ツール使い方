# Excel検索・抽出ツール使い方

▼実行例
VSCODEでmain.py起動実行してGUIツール表示
PS C:\hogehoge\desktop\20250322Pythonpra> py main.py



**大量のExcelデータから瞬時に目的のレコードを見つける業務効率化ツール**

手作業でのExcel検索に時間を取られていませんか？このツールなら、完全一致・部分一致・曖昧検索で、数万行のデータからでも瞬時に必要な情報を抽出できます。

## 📸 スクリーンショット

```
┌─────────────────────────────────────────────────────────────┐
│ Excel レコード検索・抽出ツール                                │
├─────────────────────────────────────────────────────────────┤
│ 📁 ファイル選択                                              │
│ 検索対象: [顧客リスト.xlsx     ] [参照]                      │
│ 保存先:   [検索結果.xlsx       ] [参照]                      │
├─────────────────────────────────────────────────────────────┤
│ 🔍 検索設定                                                  │
│ 対象列: [会社名 ▼]  キーワード: [サンプル           ]        │
│ モード: ○完全一致 ●部分一致 ○曖昧検索  類似度: 80%         │
├─────────────────────────────────────────────────────────────┤
│ 📊 データプレビュー・検索結果                                │
│ ┌─────────────────────────────────────────────────────┐     │
│ │ [元データ] [検索結果]                                   │     │
│ │ 検索結果: 15件                                          │     │
│ │ [001] 株式会社サンプル | 田中太郎 | IT・ソフトウェア     │     │
│ │ [002] サンプル工業株式会社 | 山田次郎 | 製造業          │     │
│ └─────────────────────────────────────────────────────┘     │
├─────────────────────────────────────────────────────────────┤
│ [📖読込] [🔍検索実行] [💾保存] [🧹クリア] [📋サンプル]      │
│ ステータス: 検索完了: 15件の結果が見つかりました             │
└─────────────────────────────────────────────────────────────┘
```

## 🚀 主な機能

### 📈 **3つの検索モード**
| モード | 用途 | 例 |
|--------|------|-----|
| **完全一致** | 正確な名称検索 | "株式会社サンプル" → 完全に同じもののみ |
| **部分一致** | キーワード検索 | "サンプル" → サンプルを含む全て |
| **曖昧検索** | 誤字脱字対応 | "さんぷる" → サンプルも検出 |

### 💡 **業務効率化機能**
- **瞬時検索**: 数万行でも1秒以内に結果表示
- **プレビュー機能**: 元データと結果を並べて確認
- **スタイル付き保存**: 見やすいExcelファイルで結果出力
- **大文字小文字無視**: "apple"と"Apple"を同じと判定
- **類似度調整**: 曖昧検索の精度を50-100%で調整

### 🛡️ **安全性**
- **元データ保護**: 読み取り専用で元ファイルを変更しない
- **バックアップ機能**: 検索条件と元データも一緒に保存
- **エラーハンドリング**: わかりやすいエラーメッセージ

## 📋 必要環境

### 必須要件
- **Python 3.7以上**
- **pandas**: データ処理
- **openpyxl**: Excel読み書き

### 確認方法
```bash
python --version          # Python 3.7+ が表示されればOK
pip list | grep pandas    # pandas が表示されればOK
pip list | grep openpyxl  # openpyxl が表示されればOK
```

## 🔧 インストール

### ステップ1: ライブラリのインストール
```bash
pip install pandas openpyxl
```

### ステップ2: プログラムダウンロード
```bash
# GitHubからダウンロード、またはファイルを直接保存
curl -O https://example.com/excel_search_tool.py
```

### ステップ3: 動作確認
```bash
python excel_search_tool.py
```

## 📚 使い方ガイド

### クイックスタート（30秒で体験）

1. **プログラム実行**
   ```bash
   python excel_search_tool.py
   ```

2. **サンプル作成**
   - 「サンプル作成」ボタンをクリック
   - テスト用データが自動生成される

3. **検索テスト**
   - キーワード欄に「サンプル」と入力
   - 「検索実行」ボタンをクリック

4. **結果確認**
   - 「検索結果」タブで結果を確認
   - 「結果保存」でExcelファイルに出力

### 詳細な使い方

#### 1. ファイル準備
```
✅ 検索対象のExcelファイルを用意
✅ ファイル形式: .xlsx または .xls
✅ データは1行目にヘッダーがある形式
```

#### 2. データ読み込み
```
1. 「参照」ボタンでExcelファイル選択
2. 「ファイル読込」ボタンクリック
3. 「元データ」タブでデータ確認
4. 検索対象列をドロップダウンから選択
```

#### 3. 検索設定
```
📝 検索キーワード入力
🎯 検索モード選択
⚙️ オプション設定（大文字小文字無視、類似度）
```

#### 4. 検索実行
```
🔍 「検索実行」ボタンクリック
📊 「検索結果」タブで結果確認
💾 「結果保存」でExcelファイル出力
```

## 🎯 検索モード詳細

### 完全一致検索
**用途**: 正確な名称がわかっている場合

**例**: 顧客データベースから特定企業の情報を検索
```
検索キーワード: "株式会社サンプル"
結果: "株式会社サンプル" のみ（完全に一致するもののみ）
```

**適用場面**:
- 請求書発行時の顧客情報確認
- 契約書作成時の企業情報検索
- 正確な社名での重複チェック

### 部分一致検索
**用途**: キーワードを含むデータを幅広く検索

**例**: 業界別企業リストの作成
```
検索キーワード: "IT"
結果: 
- "IT・ソフトウェア"
- "IT・システム開発"
- "IT・AI開発"
```

**適用場面**:
- 業種別の顧客分析
- 地域別の営業先リスト作成
- 商品カテゴリー別の在庫確認

### 曖昧検索
**用途**: 誤字脱字や表記ゆれに対応

**例**: 手入力データの名寄せ
```
検索キーワード: "マイクロソフト"
類似度: 80%
結果:
- "Microsoft Japan" (類似度: 85%)
- "マイクロソフト株式会社" (類似度: 95%)
- "MS Japan" (類似度: 75%)
```

**適用場面**:
- 顧客データの重複チェック
- 異なるシステム間のデータマッチング
- OCR読み取り結果の補正

## 💼 実務での活用例

### 1. 顧客管理業務
**課題**: 5,000社の顧客データから特定企業を検索

**従来の方法**:
```
❌ Ctrl+F で手動検索
❌ 表記ゆれで検索漏れ
❌ 大文字小文字の違いで見つからない
⏰ 1件検索に5分
```

**ツール使用後**:
```
✅ 瞬時に全パターン検索
✅ 曖昧検索で表記ゆれ対応
✅ 結果を別ファイルで保存
⏰ 1件検索に10秒
```

**効果**: **30倍の高速化**

### 2. 商品マスタ整理
**課題**: 商品データの重複チェック

**活用方法**:
```
1. 商品名で曖昧検索実行（類似度80%）
2. 似た商品名をグループ化
3. 重複データを特定・統合
4. クリーンなマスタデータ完成
```

**効果**: データ品質向上、在庫管理精度アップ

### 3. 営業リスト作成
**課題**: 業界別の営業先リスト作成

**活用方法**:
```
1. 業種列で"IT"を部分一致検索
2. IT関連企業を一括抽出
3. 地域別にさらに絞り込み
4. 営業担当別のリスト作成
```

**効果**: 営業効率向上、ターゲティング精度アップ

### 4. データ移行作業
**課題**: 旧システムから新システムへのデータ移行

**活用方法**:
```
1. 企業名で曖昧検索（類似度70%）
2. 旧新システム間のデータ対応表作成
3. 移行漏れ・重複の防止
4. データクリーニング
```

**効果**: 移行精度向上、作業時間短縮

## 🛠️ 高度な使い方

### カスタム検索パターン

#### 1. 地域別検索
```
検索対象列: 所在地
検索キーワード: 東京
検索モード: 部分一致
→ 東京都内の全企業を抽出
```

#### 2. 規模別検索
```
検索対象列: 従業員数
検索キーワード: 100
検索モード: 部分一致
→ 100人台の企業を抽出（100-199人）
```

#### 3. 多段階検索
```
1. 業種で"IT"を検索
2. 結果を保存
3. 保存ファイルを開いて地域で"東京"を検索
→ IT企業 × 東京の企業を抽出
```

### 類似度設定のコツ

| 類似度 | 用途 | 特徴 |
|--------|------|------|
| **90-100%** | 誤字脱字チェック | ほぼ完全一致、厳密 |
| **80-90%** | 表記ゆれ対応 | バランス良い、推奨 |
| **70-80%** | 幅広い検索 | 関連性重視 |
| **50-70%** | 探索的検索 | ノイズ多め、要確認 |

## 🔧 トラブルシューティング

### よくある問題と解決法

#### ❌ ライブラリエラー
```
ModuleNotFoundError: No module named 'pandas'
```
**解決方法**:
```bash
pip install pandas openpyxl
```

#### ❌ ファイル読み込みエラー
```
ファイル読み込みエラー: Excel file format cannot be determined
```
**原因**: ファイル形式の問題
**解決方法**:
- Excelで再保存（.xlsx形式）
- ファイルが破損していないか確認

#### ❌ 文字化け
```
列名が正しく表示されない
```
**原因**: エンコーディングの問題
**解決方法**:
- Excelで「UTF-8」で保存し直す
- CSVの場合はBOM付きUTF-8で保存

#### ❌ 検索結果が見つからない
**確認ポイント**:
1. **検索対象列**: 正しい列を選択しているか
2. **キーワード**: 余分な空白がないか
3. **検索モード**: 適切なモードか
4. **大文字小文字**: 無視設定は適切か

**解決手順**:
```
1. 元データタブでデータ確認
2. 完全一致で確実に存在するデータをテスト
3. 部分一致で範囲を広げて確認
4. 曖昧検索で類似度を下げてテスト
```

#### ❌ メモリエラー
```
MemoryError: Unable to allocate array
```
**原因**: 大容量ファイル（10万行以上）
**解決方法**:
- ファイルを分割して処理
- 不要な列を削除してファイルサイズ削減

### パフォーマンス最適化

#### 大容量データ（5万行以上）の場合
```
⚡ 推奨設定:
- 検索対象列を事前に絞り込み
- 完全一致 → 部分一致 → 曖昧検索の順で実行
- 曖昧検索は類似度85%以上に設定
```

#### 複数回検索する場合
```
💡 効率的な方法:
1. ファイル読み込みは1回のみ
2. 検索条件を変えて複数回実行
3. 結果をまとめて1つのファイルに保存
```

## 📊 サンプルデータ仕様

### 自動生成されるサンプルデータ
```
📁 sample_companies.xlsx
├── 会社名: 15社（日本語・英語混在）
├── 代表者: 役職者名
├── 業種: IT、製造業、商社など
├── 従業員数: 12〜2000人
└── 所在地: 主要都市
```

### テスト用検索例
```
🔍 完全一致テスト:
- "Apple Japan株式会社" → 1件
- "株式会社サンプル" → 1件

🔍 部分一致テスト:
- "サンプル" → 4件
- "IT" → 6件

🔍 曖昧検索テスト:
- "あっぷる"（類似度70%） → 2件
- "まいくろそふと"（類似度75%） → 2件
```

## 💡 新人エンジニアへの学習ポイント

### 📚 このツールから学べる技術

#### 1. **データ処理スキル**
```python
# pandasの基本操作
df = pd.read_excel(file_path)          # ファイル読み込み
mask = df['列名'].str.contains(keyword) # 条件フィルタ
result = df[mask]                      # データ抽出
```

#### 2. **GUI開発スキル**
```python
# tkinterの実用的な使い方
- ファイルダイアログの実装
- タブ切り替えインターフェース
- リアルタイムプレビュー機能
```

#### 3. **文字列処理スキル**
```python
# 検索アルゴリズムの実装
- 完全一致: ==演算子
- 部分一致: str.contains()
- 曖昧検索: difflib.SequenceMatcher
```

#### 4. **ファイル操作スキル**
```python
# Excelファイルの操作
- 読み込み: pd.read_excel()
- 書き込み: pd.to_excel()
- スタイル設定: openpyxl
```

### 🎯 キャリアへの活用

#### **業務効率化の発想力**
- 手作業の課題を技術で解決
- ユーザビリティを考慮した設計
- 実用的なツール開発経験

#### **実務直結スキル**
- データ分析の基礎
- 業務システム開発の考え方
- エラーハンドリングの重要性

#### **次のステップ**
```
🚀 発展的な機能追加:
- データベース連携（SQLite、MySQL）
- Web API連携（REST API）
- 自動レポート生成（グラフ作成）
- スケジュール実行（cron、タスクスケジューラ）
```

## 🤝 コントリビューション

### バグ報告
問題を発見した場合は、以下の情報を含めて報告してください：

```
🐛 バグ報告テンプレート:
- OS環境: Windows 10 / macOS Big Sur / Ubuntu 20.04
- Pythonバージョン: python --version
- ライブラリバージョン: pip list
- エラーメッセージ: 完全なエラー内容
- 再現手順: 1.〇〇を実行 2.△△をクリック...
- ファイル例: 可能であれば問題のあるExcelファイル（個人情報除去）
```

### 機能要望
新機能のアイデアがある場合：

```
💡 機能要望テンプレート:
- 機能名: 簡潔な機能名
- 背景: なぜその機能が必要か
- 使用場面: どんな時に使うか
- 期待効果: どんなメリットがあるか
- 参考情報: 類似ツールや技術情報
```

## 📄 ライセンス

MIT License - 商用・非商用問わず自由に使用できます。

## 🎉 謝辞

このツールは、日々の業務で Excel検索に時間を取られている全ての方のために作成されました。

特に新人エンジニアの皆さんが、業務効率化の重要性と技術の力を実感できるツールとして活用していただければ幸いです。

## 📞 サポート・質問

### よくある質問

**Q: 大きなファイル（10万行以上）でも使えますか？**
A: 使用可能ですが、メモリ使用量が増加します。ファイル分割または列の絞り込みを推奨します。

**Q: CSVファイルは対応していますか？**
A: 現在はExcelファイル（.xlsx, .xls）のみ対応です。CSVはExcelで開いて保存し直してください。

**Q: 商用利用は可能ですか？**
A: MITライセンスのため、商用利用可能です。

**Q: 他の形式のファイルに対応予定は？**
A: 将来的にCSV、TSV、データベース対応を検討中です。

### 学習リソース

**🔗 関連技術の学習リンク:**
- [Pandas公式ドキュメント](https://pandas.pydata.org/docs/)
- [tkinter チュートリアル](https://docs.python.org/3/library/tkinter.html)
- [openpyxl ドキュメント](https://openpyxl.readthedocs.io/)

---

**⭐ このツールが役に立ったら、同僚にもシェアしてみてください！**

**💬 質問・要望・感
